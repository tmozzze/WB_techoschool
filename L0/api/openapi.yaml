openapi: 3.0.0
info:
  title: L0 Orders API
  description: API для управления заказами
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /orders:
    get:
      summary: Получить все заказы
      responses:
        '200':
          description: Список всех заказов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /orders/{orderId}:
    get:
      summary: Получить заказ по ID
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID заказа
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    Order:
      type: object
      properties:
        order_uid: { type: string, example: 'b563feb7b2b84b6test' }
        track_number: { type: string, example: 'WBILMTESTTRACK' }
        entry: { type: string, example: 'WBIL' }
        delivery: { $ref: '#/components/schemas/Delivery' }
        payment: { $ref: '#/components/schemas/Payment' }
        items: { type: array, items: { $ref: '#/components/schemas/Item' } }
        locale: { type: string, example: 'en' }
        internal_signature: { type: string, example: '' }
        customer_id: { type: string, example: 'test' }
        delivery_service: { type: string, example: 'meest' }
        shardkey: { type: string, example: '9' }
        sm_id: { type: integer, example: 99 }
        date_created: { type: string, format: date-time, example: '2021-11-26T06:22:19Z' }
        oof_shard: { type: string, example: '1' }

    Delivery:
      type: object
      properties:
        name: { type: string, example: 'Test Testov' }
        phone: { type: string, example: '+9720000000' }
        zip: { type: string, example: '2639809' }
        city: { type: string, example: 'Kiryat Mozkin' }
        address: { type: string, example: 'Ploshad Mira 15' }
        region: { type: string, example: 'Kraiot' }
        email: { type: string, example: 'test@gmail.com' }

    Payment:
      type: object
      properties:
        transaction: { type: string, example: 'b563feb7b2b84b6test' }
        request_id: { type: string, example: '' }
        currency: { type: string, example: 'USD' }
        provider: { type: string, example: 'wbpay' }
        amount: { type: integer, example: 1817 }
        payment_dt: { type: integer, example: 1637907727 }
        bank: { type: string, example: 'alpha' }
        delivery_cost: { type: integer, example: 1500 }
        goods_total: { type: integer, example: 317 }
        custom_fee: { type: integer, example: 0 }

    Item:
      type: object
      properties:
        chrt_id: { type: integer, example: 9934933 }
        track_number: { type: string, example: 'WBILMTESTTRACK' }
        price: { type: integer, example: 453 }
        rid: { type: string, example: 'ab4219087a764ae0btest' }
        name: { type: string, example: 'Mascaras' }
        sale: { type: integer, example: 30 }
        size: { type: string, example: '0' }
        total_price: { type: integer, example: 317 }
        nm_id: { type: integer, example: 2389212 }
        brand: { type: string, example: 'Vivienne Sabo' }
        status: { type: integer, example: 202 }

  responses:
    NotFound:
      description: Запись не найдена
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { type: string, example: 'Запись не найдена' }
    InvalidRequest:
      description: Неверный запрос
      content:
        application/json:
          schema:
            type: object
            properties:
              message: { type: string, example: 'Неверный запрос' }